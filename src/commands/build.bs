// brite build command - Build Britescript projects
// The professional way to build Britescript projects! 🚀

// Define structs for build configuration
struct BuildConfig {
  srcDir: string;
  outDir: string;
  target: string;
  minify: boolean;
}

// TypeScript/JavaScript imports and main logic
import { existsSync, readFileSync, writeFileSync, mkdirSync, readdirSync, statSync } from "node:fs";
import { parseArgs } from "node:util";
import { join, relative, dirname, basename } from "node:path";
import { compile } from "britescript";

function showBuildHelp() {
  console.log("brite build - Build Britescript projects professionally");
  console.log("");
  console.log("USAGE:");
  console.log("  brite build [options]");
  console.log("");
  console.log("OPTIONS:");
  console.log("  -w, --watch           Watch for changes and rebuild");
  console.log("  -c, --config <file>   Use custom config file");
  console.log("  -h, --help           Show this help");
  console.log("");
  console.log("CONFIGURATION:");
  console.log("  Add a [britescript] section to bunfig.toml:");
  console.log("");
  console.log("  [britescript]");
  console.log("  srcDir = \"src\"");
  console.log("  outDir = \"build\"");
  console.log("  target = \"bun\"");
  console.log("  minify = false");
  console.log("");
  console.log("🚀 This replaces custom build scripts!");
}

// Main build command function
export async function buildCommand(args) {
  const { values, positionals } = parseArgs({
    args,
    options: {
      help: { type: "boolean", short: "h" },
      watch: { type: "boolean", short: "w" },
      config: { type: "string", short: "c" },
    },
    allowPositionals: true,
  });

  if (values.help) {
    showBuildHelp();
    return;
  }

  // Simple build configuration
  const config = {
    srcDir: "src",
    outDir: "build",
    target: "bun",
    minify: false
  };
  
  // Using Britescript pipes for output
  let buildMsg = "🏗️  Building Britescript project..."
  buildMsg |> console.log
  
  console.log("");
  console.log("📋 Configuration:");
  console.log("   Source: src/");
  console.log("   Output: build/");
  console.log("   Target: bun");
  console.log("");

  // Find all Britescript files (simplified implementation)
  const britescriptFiles = [];
  
  function findBsFiles(dir) {
    try {
      const items = readdirSync(dir);
      for (const item of items) {
        const fullPath = join(dir, item);
        const stat = statSync(fullPath);
        if (stat.isDirectory()) {
          findBsFiles(fullPath);
        } else if (item.endsWith(".bs")) {
          britescriptFiles.push(fullPath);
        }
      }
    } catch (error) {
      // Directory doesn't exist
    }
  }
  
  findBsFiles("src");
  
  if (britescriptFiles.length === 0) {
    let noFilesMsg = "ℹ️  No Britescript files found in src/ directory"
    noFilesMsg |> console.log
    return;
  }
  
  console.log("Found", britescriptFiles.length, "Britescript file(s) to compile:");
  console.log("");

  // Compile each file
  for (const inputPath of britescriptFiles) {
    const relativePath = relative("src", inputPath);
    const outputPath = join("build", relativePath.replace(/\.bs$/, ".ts"));
    
    console.log("📦 Compiling", inputPath, "→", outputPath);
    
    // Ensure output directory exists
    mkdirSync(dirname(outputPath), { recursive: true });
    
    const source = readFileSync(inputPath, "utf8");
    const compiled = compile(source);
    
    // Handle shebangs
    let finalOutput = compiled;
    let header = `// Compiled from ${inputPath} using 'brite build'\n// 🚀 Built with Britescript CLI!\n\n`;
    
    if (compiled.includes("#!/usr/bin/env bun")) {
      finalOutput = compiled.replace("#!/usr/bin/env bun\n\n", "");
      header = "#!/usr/bin/env bun\n\n" + header;
    }
    
    writeFileSync(outputPath, header + finalOutput);
    
    let successMsg = "✅ Compiled " + basename(inputPath)
    successMsg |> console.log
  }

  console.log("");
  let updateMsg = "🔧 Updating import paths..."
  updateMsg |> console.log

  // Update imports (simplified)
  for (const inputPath of britescriptFiles) {
    const relativePath = relative("src", inputPath);
    const outputPath = join("build", relativePath.replace(/\.bs$/, ".ts"));
    
    const content = readFileSync(outputPath, "utf8");
    const updatedContent = content
      .replace(/from ["']\.\/([^"']+)\.bs["']/g, 'from "./$1"')
      .replace(/from ["']\.\/commands\/([^"']+)\.bs["']/g, 'from "./commands/$1"');
    
    if (content !== updatedContent) {
      writeFileSync(outputPath, updatedContent);
      let updateFileMsg = "🔧 Updated imports in " + basename(outputPath)
      updateFileMsg |> console.log
    }
  }

  console.log("");
  let completeMsg = "🎉 Build complete! Output in build/"
  completeMsg |> console.log
  
  let replaceMsg = "✨ You can now replace 'bun scripts/build.ts' with 'brite build'!"
  replaceMsg |> console.log

  if (values.watch) {
    console.log("");
    let watchMsg = "👀 Watching for changes... (Press Ctrl+C to stop)"
    watchMsg |> console.log
    
    // Simple watch implementation would go here
    // For now, just show the message
  }
}